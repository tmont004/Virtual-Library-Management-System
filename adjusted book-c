#include "LibrarySystem.h"
#include <fstream>
#include <iostream>
#include <iomanip> 
#include <limits>
#include "json.hpp"
#include "globals.h"
#include <csignal>   // For signal handling
#include <cstdlib>   // For exit()
using namespace std;
using json = nlohmann::json;

extern std::string bookDB;
string borrowedBooksFilename = "borrowedBooksDB.json";
string queueFilename = "bookWaitlistDB.json";

// Global flag to indicate if termination signal received
volatile sig_atomic_t terminationSignalReceived = 0;

// Signal handler for termination
void handleTerminationSignal(int signal) {
    terminationSignalReceived = 1;
}

// Constructor to initialize the userInfo
LibrarySystem::LibrarySystem(const UserInfo& userInfo) : userInfo(userInfo) {}

// Method to run the library system
void LibrarySystem::run() {
    // Register signal handler
    signal(SIGTERM, handleTerminationSignal);

    bookDatabase.loadFromFile(bookDB);  // Load data from files
    userOrAdminMenu(); // Display menu after successful login
    bookDatabase.saveToFile(bookDB);    // Save data to files
}

// Method to display the user or admin menu after login
void LibrarySystem::userOrAdminMenu() {
    // Get the username and admin status from the UserInfo instance
    string userName = userInfo.getUsername();
    bool isAdmin = userInfo.isAdmin();

    // Check if the user is an admin or a regular user
    if (isAdmin) {
        adminMenu();
    } else {
        userMenu(userName);
    }
}

void LibrarySystem::userMenu(const string& userName) {
    int choice;
    do {
        clearScreen();
        cout << "Welcome, " << " User: " << userName << endl;
        cout << "===============================" << endl;
        cout << "User Menu" << endl;
        cout << "1. Search for Books" << endl;
        cout << "2. Borrow a Book" << endl;
        cout << "3. Return a Book" << endl;
        cout << "4. View Borrowed Books" << endl;
        cout << "5. Add a Book" << endl;
        cout << "6. View Library" << endl;
        cout << "7. Logout" << endl;
        cout << "===============================" << endl;
        cout << "Enter your choice: ";
        cin >> choice;
        switch (choice) {
            case 1:
                searchBooks();
                pressEnterToContinue();
                break;
            case 2:
                interactiveBorrowBook();
                pressEnterToContinue();
                break;
            case 3:
                returnBook();
                pressEnterToContinue();
                break;
            case 4:
                clearScreen();
                viewBorrowedBooks();
                pressEnterToContinue();
                break;
            case 5:
                addBook();
                pressEnterToContinue();
                break;
            case 6:
                viewLibrary();
                pressEnterToContinue();
                break;
            case 7:
                cout << "Logged out." << endl;
                break;
            default:
                cout << "Invalid choice. Please try again." << endl;
                break;
        }
    } while (choice != 7 && !terminationSignalReceived);
}

void LibrarySystem::adminMenu() {
    int choice;
    do {
        clearScreen();
        cout << "Welcome, Admin" << endl;
        cout << "===============================" << endl;
        cout << "1. Add a Book" << endl;
        cout << "2. Remove a Book" << endl;
        cout << "3. Update Book Information" << endl;
        cout << "4. Logout" << endl;
        cout << "===============================" << endl;
        cout << "Enter your choice: ";
        cin >> choice;
        switch (choice) {
            case 1:
                addBook();
                pressEnterToContinue();
                break;
            case 2:
                removeBook();
                pressEnterToContinue();
                break;
            case 3:
                updateBook();
                pressEnterToContinue();
                break;
            case 4:
                cout << "Logged out." << endl;
                pressEnterToContinue();
                break;
            default:
                cout << "Invalid choice. Please try again." << endl;
                pressEnterToContinue();
                break;
        }
    } while (choice != 4 && !terminationSignalReceived);
}

void LibrarySystem::searchBooks() {
    int searchChoice;
    clearScreen();
    cout << "Search Options:" << endl;
    cout << "===============================" << endl;
    cout << "1. Search by Title" << endl;
    cout << "2. Search by Author" << endl;
    cout << "3. Search by ISBN" << endl;
    cout << "4. Back to Menu" << endl;
    cout << "===============================" << endl;
    cout << "Enter your choice: ";
    cin >> searchChoice;
    switch (searchChoice) {
        case 1: {
            string title;
            cin.ignore(); // Clear newline character
            cout << "Enter title to search: ";
            getline(cin, title);
            try {
                Book foundBook = bookDatabase.findBookByTitle(title);
                if (!foundBook.getTitle().empty()) {
                    cout << "Book found:" << endl;
                    foundBook.print(); // Assuming print() method prints book details
                    // Check if book is available
                    if (foundBook.getCopiesInStock() > 0) {
                        cout << "This book is available." << endl;
                        char borrowChoice;
                        cout << "Do you want to borrow this book? (y/n): ";
                        cin >> borrowChoice;
                        if (borrowChoice == 'y' || borrowChoice == 'Y') {
                            borrowBook(foundBook);
                        }
                    } else {
                        cout << "This book is currently not available." << endl;
                    }
                } else {
                    cout << "Book with title '" << title << "' not found." << endl;
                }
            } catch (const runtime_error& e) {
                cerr << "Error: " << e.what() << endl;
            }
            break;
        }
        case 2: {
            string author;
            cin.ignore(); // Clear newline character
            cout << "Enter author to search: ";
            getline(cin, author);
            cout << "Yet to be Implemented" << endl;
            // Implement searching books by author
            // Iterate through database or use appropriate method in BookDatabase
            // Example: bookDatabase.findBooksByAuthor(author);
            break;
        }
        case 3: {
            string isbn;
            cout << "Enter ISBN to search: ";
            cin >> isbn;
            try {
                Book foundBook = bookDatabase.getBookByISBN(isbn);
                if (!foundBook.getTitle().empty()) {
                    cout << "Book found:" << endl;
                    foundBook.print(); // Assuming print() method prints book details
                    // Check if book is available
                    if (foundBook.getCopiesInStock() > 0) {
                        cout << "This book is available." << endl;
                        char borrowChoice;
                        cout << "Do you want to borrow this book? (y/n): ";
                        cin >> borrowChoice;
                        if (borrowChoice == 'y' || borrowChoice == 'Y') {
                            borrowBook(foundBook);
                        }
                    } else {
                        cout << "This book is currently not available." << endl;
                    }
                } else {
                    cout << "Book with ISBN '" << isbn << "' not found." << endl;
                }
            } catch (const runtime_error& e) {
                cerr << "Error: " << e.what() << endl;
            }
            break;
        }
        case 4:
            // Return to previous menu
            return;
        default:
            cout << "Invalid choice. Please try again." << endl;
            break;
    }
}

void LibrarySystem::returnBook() {
    clearScreen();
    string isbn;
    cout << "Enter the ISBN of the book to return: ";
    cin >> isbn;
    // Find the book in the book database
    Book book;
    try {
        book = bookDatabase.getBookByISBN(isbn);
    } catch (const runtime_error& e) {
        cerr << "Error: " << e.what() << endl;
        return;
    }
    // Check if the book was found
    if (book.getISBN().empty()) {
        return;
    }
    // Increase the number of copies in stock
    try {
        bookDatabase.updateBook(isbn, book.getTitle(), book.getAuthor(), book.getCopiesInStock() + 1);
        cout << "Book with ISBN '" << isbn << "' returned successfully." << endl;
        // Remove the book from the user's borrowed books list
        string username = userInfo.getUsername();
        json borrowedBooks;
        json bookWaitlist;
        ifstream inFile(borrowedBooksFilename);
        if (inFile.is_open()) {
            inFile >> borrowedBooks;
            inFile.close();
            if (borrowedBooks.contains(username)) {
                auto& booksList = borrowedBooks[username];
                booksList.erase(std::remove(booksList.begin(), booksList.end(), isbn), booksList.end());
                // Save the updated borrowed books JSON file
                ofstream outFile(borrowedBooksFilename);
                if (outFile.is_open()) {
                    outFile << borrowedBooks.dump(4); // Pretty print with 4 spaces
                    outFile.close();
                } else {
                    cerr << "Failed to open file for writing: " << borrowedBooksFilename << endl;
                }
            } else {
                cerr << "Error: User '" << username << "' not found in borrowed books database." << endl;
            }
        } else {
            cerr << "Failed to open file for reading: " << borrowedBooksFilename << endl;
        }
        // Update the book's waitlist
        ifstream queueFile(queueFilename);
        if (queueFile.is_open()) {
            queueFile >> bookWaitlist;
            queueFile.close();
        } else {
            throw runtime_error("Failed to open file for reading: " + borrowedBooksFilename);
        }

        if (!bookWaitlist[book.getISBN()].empty()) { // If there are users in the queue
            // Get the username of the next user in the waitlist
            string nextUser = bookWaitlist[book.getISBN()].front();
            bookWaitlist[book.getISBN()].erase(bookWaitlist[book.getISBN()].begin());

            // Notify the user about book availability (implementation dependent)
            cout << "User " << nextUser << " has been notified about the availability of book with ISBN '" << book.getISBN() << "'." << endl;

            // Save the updated waitlist JSON file
            ofstream waitlistFile(queueFilename);
            if (waitlistFile.is_open()) {
                waitlistFile << bookWaitlist.dump(4); // Pretty print with 4 spaces
                waitlistFile.close();
            } else {
                cerr << "Failed to open file for writing: " << borrowedBooksFilename << endl;
            }
        }
    } catch (const exception& e) {
        cerr << "Error: " << e.what() << endl;
    }
}

void LibrarySystem::addBook() {
    clearScreen();
    string isbn, title, author;
    int copies;
    cout << "Enter ISBN: ";
    cin >> isbn;
    cout << "Enter Title: ";
    cin.ignore(); // Clear newline character
    getline(cin, title);
    cout << "Enter Author: ";
    getline(cin, author);
    cout << "Enter Number of Copies: ";
    cin >> copies;

    try {
        if (bookDatabase.isBookAvailable(isbn)) {
            cout << "Book with this ISBN already exists.\n";
        } else {
            bookDatabase.addBook(Book(isbn, title, author, copies));

            // Add the book's ISBN to the waitlist as a new entry
            json bookWaitlist;
            ifstream queueFile(queueFilename);
            if (queueFile.is_open()) {
                queueFile >> bookWaitlist;
                queueFile.close();
            } else {
                throw runtime_error("Failed to open file for reading: " + borrowedBooksFilename);
            }

            // Add the ISBN to the end of the list
            bookWaitlist[isbn] = json::array();

            // Save the updated waitlist JSON file
            ofstream waitlistFile(queueFilename);
            if (waitlistFile.is_open()) {
                waitlistFile << bookWaitlist.dump(4); // Pretty print with 4 spaces
                waitlistFile.close();
            } else {
                cerr << "Failed to open file for writing: " << borrowedBooksFilename << endl;
            }

            cout << "Book added successfully.\n";
        }
    } catch (const exception& e) {
        cerr << "Error: " << e.what() << endl;
    }
}

void LibrarySystem::removeBook() {
    clearScreen();
    string isbn;
    cout << "Enter ISBN of the book to remove: ";
    cin >> isbn;
    try {
        // Check if the book exists
        if (bookDatabase.isBookAvailable(isbn)) {
            bookDatabase.removeBook(isbn);

            // Remove the book's ISBN from the waitlist
            json bookWaitlist;
            ifstream queueFile(queueFilename);
            if (queueFile.is_open()) {
                queueFile >> bookWaitlist;
                queueFile.close();
            } else {
                throw runtime_error("Failed to open file for reading: " + borrowedBooksFilename);
            }

            // Erase the ISBN and its associated objects
            bookWaitlist.erase(isbn);

            // Save the updated waitlist JSON file
            ofstream waitlistFile(queueFilename);
            if (waitlistFile.is_open()) {
                waitlistFile << bookWaitlist.dump(4); // Pretty print with 4 spaces
                waitlistFile.close();
            } else {
                cerr << "Failed to open file for writing: " << borrowedBooksFilename << endl;
            }

            cout << "Book with ISBN " << isbn << " removed successfully.\n";
        } else {
            cout << "Error: Book with ISBN " << isbn << " not found.\n";
        }
    } catch (const exception& e) {
        cerr << "Error: " << e.what() << endl;
    }
}
