System analysis/facilitator

Library System Project Analysis 
Overview 
The analysis below provided a basic virtual library management system, which includes loading and preserving data from/to files, user registration and login, and managing books (adding, removing, updating). This system is designed to handle the basic user and administrative functions, creating a comprehensive solution for library management. 
Detailed elucidations and illustrations

LibrarySystem: run Method
This is the library system's entry point. It sequentially loads data, displays the pre-login menu for user interaction, and saves any changes made during the session.


void LibrarySystem::run() {
    loadFromFile();  // Load data from files
    preLoginMenu();  // Display pre-login menu
    saveToFile();    // Save data to files
}


2. Loading Data (LibrarySystem: load from file)
This method reads user and book data from JSON files. It utilizes the nlohmann:json library for parsing JSON data and populates the user and books maps with the respective data. 
void LibrarySystem::loadFromFile() {
    std::ifstream userFile("userDatabase.json");
    std::ifstream bookFile("bookDB.json");
    if (userFile.is_open() && bookFile.is_open()) {
        nlohmann::json userData, bookData;
        userFile >> userData;
        bookFile >> bookData;
        for (auto& [key, value] : userData.items()) {
            users[key] = User(value["username"], value["firstName"], value["lastName"], value["phoneNumber"], value["address"], value["birthday"], value["password"], value["isAdmin"]);
        }
        for (auto& [key, value] : bookData.items()) {
            books[key] = Book(value["title"], value["author"], value["isbn"], value["copiesInStock"]);
        }
        userFile.close();
        bookFile.close();
    } else {
        std::cerr << "Error opening files for loading data.\n";
    }
}


3. Saving Data (LibrarySystem: savefile)
This method translates the current state of users and books to their respective JSON files, ensuring data retention between sessions. 


void LibrarySystem::saveToFile() {
    std::ofstream userFile("userDatabase.json");
    std::ofstream bookFile("bookDB.json");
    if (userFile.is_open() && bookFile.is_open()) {
        nlohmann::json userData, bookData;
        for (const auto& [key, user] : users) {
            userData[key] = { {"username", user.getUsername()}, {"password", user.getPassword()}, {"isAdmin", user.isAdmin()} };
        }
        for (const auto& [key, book] : books) {
            bookData[key] = { {"title", book.getTitle()}, {"author", book.getAuthor()}, {"isbn", book.getISBN()}, {"copiesInStock", book.getCopiesInStock()} };
        }
        userFile << userData.dump(4);
        bookFile << bookData.dump(4);


        userFile.close();
        bookFile.close();
    } else {
        std::cerr << "Error opening files for saving data.\n";
    }
}


4. Pre-Login Menu (LibrarySystem: preLoginMenu)
This method provides a menu for users to log in, register a new user, or exit the system. It repeatedly prompts the user until a valid decision is made or the user chooses to exit as coded below.


void LibrarySystem::preLoginMenu() {
    int choice;
    do {
        std::cout << "Welcome to the Virtual Library Management System\n";
        std::cout << "1. Login\n2. Register\n3. Exit\n";
        std::cin >> choice;
        switch (choice) {
            case 1:
                login();  // Handle login
                break;
            case 2:
                registerUser();  // Handle user registration
                break;
            case 3:
                std::cout << "Goodbye!\n";
                break;
            default:
                std::cout << "Invalid choice. Try again.\n";
        }
    } while (choice != 3);
}


5. User Menu (LibrarySystem: user menu)
After logging in, users are provided with a menu for book-related activities. These include searching for books, borrowing, returning, and checking borrowed books as illustrated below. 


void LibrarySystem::userMenu(const std::string& username) {
    int choice;
    do {
        std::cout << "User Menu\n";
        std::cout << "1. Search for Books\n2. Borrow a Book\n3. Return a Book\n4. View Borrowed Books\n5. Logout\n";
        std::cin >> choice;
        switch (choice) {
            case 1:
                searchBooks();  // Handle book search
                break;
            case 2:
                borrowBook(username);  // Handle book borrowing
                break;
            case 3:
                returnBook(username);  // Handle book returning
                break;
            case 4:
                // users[username].viewBorrowedBooks();  // View borrowed books
                break;
            case 5:
                std::cout << "Logged out.\n";
                break;
            default:
                std::cout << "Invalid choice. Try again.\n";
        }
    } while (choice != 5);
}


6. Admin Menu (LibrarySystem: adminMenu)
This menu is available only to admin users and provides functionality to add, remove, and update book information. 
void LibrarySystem::adminMenu() {
    int choice;
    do {
        std::cout << "Admin Dashboard\n";
        std::cout << "1. Add a Book\n2. Remove a Book\n3. Update Book Information\n4. Logout\n";
        std::cin >> choice;
        switch (choice) {
            case 1:
                addBook();  // Handle adding a book
                break;
            case 2:
                removeBook();  // Handle removing a book
                break;
            case 3:
                updateBook();  // Handle updating book information
                break;
            case 4:
                std::cout << "Logged out.\n";
                break;
            default:
                std::cout << "Invalid choice. Try again.\n";
        }
    } while (choice != 4);
}


7. Adding a Book (LibrarySystem: add Book)
This method facilitates the creation of a new book in the library. The admin checks for existing books with the same ISBN before adding the new book. 


void LibrarySystem::addBook() {
    std::string title, author, isbn;
    int copiesInStock;


    std::cin.ignore(); // To clear the newline character left by previous input
    std::cout << "Enter book title: ";
    std::getline(std::cin, title);
    std::cout << "Enter author: ";
    std::getline(std::cin, author);
    std::cout << "Enter ISBN: ";
    std::getline(std::cin, isbn);
    std::cout << "Enter number of copies: ";
    std::cin >> copiesInStock;


    // Create a new Book object
    Book* newBook = new Book(title, author, isbn, copiesInStock);


    // Check if the book with the given ISBN already exists using search
    if (bookTree.searchBook(isbn)) {
        std::cout << "Book with this ISBN already exists.\n";
        delete newBook; // Avoid memory leak
    } else {
        bookTree.addBook(newBook); // Add the new book to the BST
        std::cout << "Book added successfully.\n";
    }
}


8.  Removing a Book (LibrarySystem::removeBook)
This method lets the admin remove a book from the library by specifying the ISBN. Here is the programming.
void LibrarySystem::removeBook() {
    std::string isbn;
    std::cout << "Enter ISBN of the book to remove: ";
    std::cin >> isbn;


    // Check if the book exists
    if (books.find(isbn) != books.end()) {
        books.erase(isbn);  // Remove the book
        std::cout << "Book removed successfully.\n";
    } else {
        std::cout << "Book not found.\n";
    }
}


9. Updating Book Information (LibrarySystem: update book)
This method enables the admin to update the details of an existing book as demonstrated below.
void LibrarySystem::updateBook() {
    std::string isbn, title, author;
    int copiesInStock;
    std::cout << "Enter ISBN of the book to update: ";
    std::cin >> isbn;


    if (books.find(isbn) != books.end()) {
        std::cout << "Enter new title: ";
        std::cin.ignore(); // Ignore the newline character left by previous input
        std::getline(std::cin, title);
        std::cout << "Enter new author: ";
        std::getline(std::cin, author);
        std::cout << "Enter number of copies in stock: ";
        std::cin >> copiesInStock;


        books[isbn].setTitle(title);
        books[isbn].setAuthor(author);
        books[isbn].setCopiesInStock(copiesInStock);
        std::cout << "Book updated successfully.\n";
    } else {
        std::cout << "Book not found.\n";
    }
}


Summary 
The library management system provides a comprehensive approach to managing users and books. It includes functions for user registration, login, and distinct menus for users and administrators. Users can find books, borrow, and return them, while administrators can add, remove, and update them. 
The system ensures data persistence by loading and saving data from/to JSON files. Error handling for file operations and user input validation are also used to improve robustness. 
In conclusion, the project encapsulates the essential operations needed for a virtual library management system, providing a user-friendly interface and critical functionalities for users and administrators. 


